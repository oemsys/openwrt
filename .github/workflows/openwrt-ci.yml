#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 

name: OpenWrt-CI-2020年5月21日-01

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt and release
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h
      - name: 自定义插件主题(adguardhome)
        run: | 
          cd package 
          mkdir openwrt-packages 
          cd openwrt-packages 
          git clone https://github.com/rufengsuixing/luci-app-adguardhome.git
          #git clone https://github.com/openwrt-develop/luci-theme-atmaterial.git 
          #git clone https://gitee.com/shaoxia1991/koolproxyR.git
          #git clone https://github.com/maxlicheng/luci-app-ssr-plus.git
          #git clone https://github.com/rosywrt/luci-theme-rosy.git
      - name: Update feeds
        run: |
          sed -i 's/\"#src-git\"/\"src-git\"/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ========================固件定制部分========================
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          EOF
          # 固件压缩:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF
          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF
          # IPv6支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF
          # 多文件系统支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-common=y
          CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          EOF
          # USB3.0支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          EOF
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          #流量智能队列管理（QOS）
          #CONFIG_PACKAGE_luci-app-sqm=y
          #MWAN3负载均衡
          #CONFIG_PACKAGE_luci-app-mwan3=y
          #MWAN3分流助手
          #CONFIG_PACKAGE_luci-app-mwan3helper=y
          #Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS...
          CONFIG_PACKAGE_luci-app-flowoffload=y
          #多拨虚拟网卡
          #CONFIG_PACKAGE_luci-app-syncdial=y
          #广告屏蔽大师Plus +
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          #IP/MAC绑定
          #CONFIG_PACKAGE_luci-app-arpbind=y
          #动态域名 DNS（集成阿里DDNS客户端）
          #CONFIG_PACKAGE_luci-app-ddns=y
          # Aria2 是一个支持多协议多线程的下载器
          CONFIG_PACKAGE_luci-app-aria2=y
          # BaiduPCS-Go, 可以让你高效的使用百度云
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          #Docker容器   * 
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-app-docker=y
          #SmartDNS本地服务器
          #CONFIG_PACKAGE_luci-app-smartdns=y
          #Unbound DNS解析器
          #CONFIG_PACKAGE_luci-app-unbound=y
          #adguardhome
          CONFIG_PACKAGE_luci-app-adguardhome=y
          #DNSForwarder防DNS污染
          #CONFIG_PACKAGE_luci-app-dnsforwarder=y
          #内网穿透 Frp
          #CONFIG_PACKAGE_luci-app-frpc=y
          #KOD可道云私人网盘
          CONFIG_PACKAGE_luci-app-kodexplorer=y
          #完全兼容DLNA / UPnP-AV客户端的服务器软件
          #CONFIG_PACKAGE_luci-app-minidlna=y
          #CONFIG_PACKAGE_luci-app-openvpn=y
          #CONFIG_PACKAGE_luci-app-openvpn-server=y
          #BT下载工具（qBittorrent）
          CONFIG_PACKAGE_luci-app-qbittorrent=y
          #ssr低调上网Plus+
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          #CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          #CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          #CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          #CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          #CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          #违禁软件 Python服务器
          #CONFIG_PACKAGE_luci-app-ssrserver-python=y
          #网页终端命令行
          #CONFIG_PACKAGE_luci-app-ttyd=y
          #CONFIG_PACKAGE_luci-app-v2ray-server=y
          #微力同步   *
          CONFIG_PACKAGE_luci-app-verysync=y
          #Web管理页面设置
          CONFIG_PACKAGE_luci-app-webadmin=y
          #virtual**服务器 WireGuard状态
          #CONFIG_PACKAGE_luci-app-wireguard=y
          #实时流量监测
          #CONFIG_PACKAGE_luci-app-wrtbwmon=y
          EOF
          # LuCI主题:
          cat >> .config <<EOF
          #CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-netgear=y
          #CONFIG_PACKAGE_luci-theme-rosy=y
          CONFIG_PACKAGE_luci-theme-atmaterial=y
          EOF
          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y
          EOF
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF
          # 
          # ========================固件定制部分结束========================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Create release
        if: github.event == 'push'
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false      

      - name: Upload release asset
        if: github.event == 'push'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/targets/*/*/
